#! /usr/bin/env ruby

require 'rubygems'
require 'twitter'
require 'yaml'

begin
  configuration = YAML.parse(File.read(ENV['HOME'] + '/.gtweeter')).transform
rescue Errno::ENOENT
  puts "Couldn't load configuration file. Is there a `#{ENV['HOME']}/.gtweeter` file?"
  exit 1
end

USERNAME = configuration['username']
PASSWORD = configuration['password']

class GTweeter
  def initialize(username, password)
    @username = username
    @password = password
  end

  def connect
    puts "Connecting as #{@username}" if $DEBUG
    @twitter = Twitter::Base.new(Twitter::HTTPAuth.new(@username, @password))
  end

  def last_update_id
    @last_update_id ||= begin
      last_update = @twitter.friends_timeline(:count => 1)[0]
      if last_update
        puts "Most recent update found: #{last_update.id}" if $DEBUG
        last_update.id
      end
    end
  end

  def last_update_id=(id)
    puts "Most recent update set to #{id}" if $DEBUG
    @last_update_id = id
  end

  def updates(&block)
    new_updates = @twitter.friends_timeline(:since_id => last_update_id)
    puts "Processing #{new_updates.size} updates..." if $DEBUG
    new_updates.each { |update| yield update; self.last_update_id = update.id }
    puts "Done processing most recent updates" if $DEBUG
  end
end

timeline = GTweeter.new(USERNAME, PASSWORD)
timeline.connect

mutex = Mutex.new

@recent_ids = {}

Thread.new do
  loop do
    while @recent_ids.values.size > 100
      puts "Expiring update #{@recent_ids[timestamp]} from #{Time.at(timestamp)} because there are more than 100 cached updates" if $DEBUG
      mutex.synchronize {
        @recent_ids.delete(@recent_ids.keys[0])
      }
    end
    sleep 1
  end
end

loop do
  puts "Preparing to process updates" if $DEBUG
  begin
  timeline.updates do |update|
    if !@recent_ids.values.include? update.id
      %x[notify-send "#{update.user.name} (#{update.user.screen_name})" "#{update.text}"]
      mutex.synchronize {
        @recent_ids[Time.now.to_f] = update.id
      }
      puts "[#{update.id}] #{update.user.screen_name}: #{update.text}" if $DEBUG
    end
  end
  rescue Timeout::Error, RuntimeError => e
    if $DEBUG
      puts "Error: #{e.message}"
      e.backtrace.each do |line|
        puts "  #{line}"
      end
      puts "Will retry in 5 seconds"
    end
    sleep 5
    retry
  end
  puts "Sleeping so we don't hammer Twitter with requests" if $DEBUG
  sleep 60
end
